{"version":3,"sources":["src/TableRenderers.jsx"],"names":["spanSize","arr","i","j","x","asc","end","noDraw","len","length","asc1","end1","stop","redColorScaleGenerator","values","min","Math","apply","max","nonRed","round","backgroundColor","makeRenderer","opts","TableRenderer","pivotData","PivotData","props","colAttrs","cols","rowAttrs","rows","rowKeys","getRowKeys","colKeys","getColKeys","grandTotalAggregator","getAggregator","valueCellColors","rowTotalColors","colTotalColors","heatmapMode","colorScaleGenerator","tableColorScaleGenerator","rowTotalValues","map","value","colTotalValues","allValues","push","r","c","colorScale","v","rowColorScales","rowValues","colColorScales","colValues","getClickHandler","tableOptions","clickCallback","filters","Object","keys","attr","e","colKey","rowKey","totalAggregator","txt","aggregator","format","React","PureComponent","defaultProps","propTypes","PropTypes","func","object","TSVExportRenderer","headerRow","aggregatorName","join","result","row","unshift","width","window","innerWidth","height","innerHeight","Table"],"mappings":"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","file":"TableRenderers.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {PivotData} from './Utilities';\r\n\r\n// helper function for setting row/col-span in pivotTableRenderer\r\nconst spanSize = function(arr, i, j) {\r\n  let x;\r\n  if (i !== 0) {\r\n    let asc, end;\r\n    let noDraw = true;\r\n    for (\r\n      x = 0, end = j, asc = end >= 0;\r\n      asc ? x <= end : x >= end;\r\n      asc ? x++ : x--\r\n    ) {\r\n      if (arr[i - 1][x] !== arr[i][x]) {\r\n        noDraw = false;\r\n      }\r\n    }\r\n    if (noDraw) {\r\n      return -1;\r\n    }\r\n  }\r\n  let len = 0;\r\n  while (i + len < arr.length) {\r\n    let asc1, end1;\r\n    let stop = false;\r\n    for (\r\n      x = 0, end1 = j, asc1 = end1 >= 0;\r\n      asc1 ? x <= end1 : x >= end1;\r\n      asc1 ? x++ : x--\r\n    ) {\r\n      if (arr[i][x] !== arr[i + len][x]) {\r\n        stop = true;\r\n      }\r\n    }\r\n    if (stop) {\r\n      break;\r\n    }\r\n    len++;\r\n  }\r\n  return len;\r\n};\r\n\r\nfunction redColorScaleGenerator(values) {\r\n  const min = Math.min.apply(Math, values);\r\n  const max = Math.max.apply(Math, values);\r\n  return x => {\r\n    // eslint-disable-next-line no-magic-numbers\r\n    const nonRed = 255 - Math.round((255 * (x - min)) / (max - min));\r\n    return {backgroundColor: `rgb(255,${nonRed},${nonRed})`};\r\n  };\r\n}\r\n\r\nfunction makeRenderer(opts = {}) {\r\n  class TableRenderer extends React.PureComponent {\r\n    render() {\r\n      const pivotData = new PivotData(this.props);\r\n      const colAttrs = pivotData.props.cols;\r\n      const rowAttrs = pivotData.props.rows;\r\n      const rowKeys = pivotData.getRowKeys();\r\n      const colKeys = pivotData.getColKeys();\r\n      const grandTotalAggregator = pivotData.getAggregator([], []);\r\n\r\n      let valueCellColors = () => {};\r\n      let rowTotalColors = () => {};\r\n      let colTotalColors = () => {};\r\n      if (opts.heatmapMode) {\r\n        const colorScaleGenerator = this.props.tableColorScaleGenerator;\r\n        const rowTotalValues = colKeys.map(x =>\r\n          pivotData.getAggregator([], x).value()\r\n        );\r\n        rowTotalColors = colorScaleGenerator(rowTotalValues);\r\n        const colTotalValues = rowKeys.map(x =>\r\n          pivotData.getAggregator(x, []).value()\r\n        );\r\n        colTotalColors = colorScaleGenerator(colTotalValues);\r\n\r\n        if (opts.heatmapMode === 'full') {\r\n          const allValues = [];\r\n          rowKeys.map(r =>\r\n            colKeys.map(c =>\r\n              allValues.push(pivotData.getAggregator(r, c).value())\r\n            )\r\n          );\r\n          const colorScale = colorScaleGenerator(allValues);\r\n          valueCellColors = (r, c, v) => colorScale(v);\r\n        } else if (opts.heatmapMode === 'row') {\r\n          const rowColorScales = {};\r\n          rowKeys.map(r => {\r\n            const rowValues = colKeys.map(x =>\r\n              pivotData.getAggregator(r, x).value()\r\n            );\r\n            rowColorScales[r] = colorScaleGenerator(rowValues);\r\n          });\r\n          valueCellColors = (r, c, v) => rowColorScales[r](v);\r\n        } else if (opts.heatmapMode === 'col') {\r\n          const colColorScales = {};\r\n          colKeys.map(c => {\r\n            const colValues = rowKeys.map(x =>\r\n              pivotData.getAggregator(x, c).value()\r\n            );\r\n            colColorScales[c] = colorScaleGenerator(colValues);\r\n          });\r\n          valueCellColors = (r, c, v) => colColorScales[c](v);\r\n        }\r\n      }\r\n\r\n      const getClickHandler =\r\n        this.props.tableOptions && this.props.tableOptions.clickCallback\r\n          ? (value, rowValues, colValues) => {\r\n              const filters = {};\r\n              for (const i of Object.keys(colAttrs || {})) {\r\n                const attr = colAttrs[i];\r\n                if (colValues[i] !== null) {\r\n                  filters[attr] = colValues[i];\r\n                }\r\n              }\r\n              for (const i of Object.keys(rowAttrs || {})) {\r\n                const attr = rowAttrs[i];\r\n                if (rowValues[i] !== null) {\r\n                  filters[attr] = rowValues[i];\r\n                }\r\n              }\r\n              return e =>\r\n                this.props.tableOptions.clickCallback(\r\n                  e,\r\n                  value,\r\n                  filters,\r\n                  pivotData\r\n                );\r\n            }\r\n          : null;\r\n\r\n      return (\r\n        <table className=\"pvtTable\">\r\n          <thead>\r\n            {colAttrs.map(function(c, j) {\r\n              return (\r\n                <tr key={`colAttr${j}`}>\r\n                  {j === 0 && rowAttrs.length !== 0 && (\r\n                    <th colSpan={rowAttrs.length} rowSpan={colAttrs.length} />\r\n                  )}\r\n                  <th className=\"pvtAxisLabel\">{c}</th>\r\n                  {colKeys.map(function(colKey, i) {\r\n                    const x = spanSize(colKeys, i, j);\r\n                    if (x === -1) {\r\n                      return null;\r\n                    }\r\n                    return (\r\n                      <th\r\n                        className=\"pvtColLabel\"\r\n                        key={`colKey${i}`}\r\n                        colSpan={x}\r\n                        rowSpan={\r\n                          j === colAttrs.length - 1 && rowAttrs.length !== 0\r\n                            ? 2\r\n                            : 1\r\n                        }\r\n                      >\r\n                        {colKey[j]}\r\n                      </th>\r\n                    );\r\n                  })}\r\n\r\n                  {j === 0 && (\r\n                    <th\r\n                      className=\"pvtTotalLabel\"\r\n                      rowSpan={\r\n                        colAttrs.length + (rowAttrs.length === 0 ? 0 : 1)\r\n                      }\r\n                    >\r\n                      Totals\r\n                    </th>\r\n                  )}\r\n                </tr>\r\n              );\r\n            })}\r\n\r\n            {rowAttrs.length !== 0 && (\r\n              <tr>\r\n                {rowAttrs.map(function(r, i) {\r\n                  return (\r\n                    <th className=\"pvtAxisLabel\" key={`rowAttr${i}`}>\r\n                      {r}\r\n                    </th>\r\n                  );\r\n                })}\r\n                <th className=\"pvtTotalLabel\">\r\n                  {colAttrs.length === 0 ? 'Totals' : null}\r\n                </th>\r\n              </tr>\r\n            )}\r\n          </thead>\r\n\r\n          <tbody>\r\n            {rowKeys.map(function(rowKey, i) {\r\n              const totalAggregator = pivotData.getAggregator(rowKey, []);\r\n              return (\r\n                <tr key={`rowKeyRow${i}`}>\r\n                  {rowKey.map(function(txt, j) {\r\n                    const x = spanSize(rowKeys, i, j);\r\n                    if (x === -1) {\r\n                      return null;\r\n                    }\r\n                    return (\r\n                      <th\r\n                        key={`rowKeyLabel${i}-${j}`}\r\n                        className=\"pvtRowLabel\"\r\n                        rowSpan={x}\r\n                        colSpan={\r\n                          j === rowAttrs.length - 1 && colAttrs.length !== 0\r\n                            ? 2\r\n                            : 1\r\n                        }\r\n                      >\r\n                        {txt}\r\n                      </th>\r\n                    );\r\n                  })}\r\n                  {colKeys.map(function(colKey, j) {\r\n                    const aggregator = pivotData.getAggregator(rowKey, colKey);\r\n                    return (\r\n                      <td\r\n                        className=\"pvtVal\"\r\n                        key={`pvtVal${i}-${j}`}\r\n                        onClick={\r\n                          getClickHandler &&\r\n                          getClickHandler(aggregator.value(), rowKey, colKey)\r\n                        }\r\n                        style={valueCellColors(\r\n                          rowKey,\r\n                          colKey,\r\n                          aggregator.value()\r\n                        )}\r\n                      >\r\n                        {aggregator.format(aggregator.value())}\r\n                      </td>\r\n                    );\r\n                  })}\r\n                  <td\r\n                    className=\"pvtTotal\"\r\n                    onClick={\r\n                      getClickHandler &&\r\n                      getClickHandler(totalAggregator.value(), rowKey, [null])\r\n                    }\r\n                    style={colTotalColors(totalAggregator.value())}\r\n                  >\r\n                    {totalAggregator.format(totalAggregator.value())}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n\r\n            <tr>\r\n              <th\r\n                className=\"pvtTotalLabel\"\r\n                colSpan={rowAttrs.length + (colAttrs.length === 0 ? 0 : 1)}\r\n              >\r\n                Totals\r\n              </th>\r\n\r\n              {colKeys.map(function(colKey, i) {\r\n                const totalAggregator = pivotData.getAggregator([], colKey);\r\n                return (\r\n                  <td\r\n                    className=\"pvtTotal\"\r\n                    key={`total${i}`}\r\n                    onClick={\r\n                      getClickHandler &&\r\n                      getClickHandler(totalAggregator.value(), [null], colKey)\r\n                    }\r\n                    style={rowTotalColors(totalAggregator.value())}\r\n                  >\r\n                    {totalAggregator.format(totalAggregator.value())}\r\n                  </td>\r\n                );\r\n              })}\r\n\r\n              <td\r\n                onClick={\r\n                  getClickHandler &&\r\n                  getClickHandler(grandTotalAggregator.value(), [null], [null])\r\n                }\r\n                className=\"pvtGrandTotal\"\r\n              >\r\n                {grandTotalAggregator.format(grandTotalAggregator.value())}\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      );\r\n    }\r\n  }\r\n\r\n  TableRenderer.defaultProps = PivotData.defaultProps;\r\n  TableRenderer.propTypes = PivotData.propTypes;\r\n  TableRenderer.defaultProps.tableColorScaleGenerator = redColorScaleGenerator;\r\n  TableRenderer.defaultProps.tableOptions = {};\r\n  TableRenderer.propTypes.tableColorScaleGenerator = PropTypes.func;\r\n  TableRenderer.propTypes.tableOptions = PropTypes.object;\r\n  return TableRenderer;\r\n}\r\n\r\nclass TSVExportRenderer extends React.PureComponent {\r\n  render() {\r\n    const pivotData = new PivotData(this.props);\r\n    const rowKeys = pivotData.getRowKeys();\r\n    const colKeys = pivotData.getColKeys();\r\n    if (rowKeys.length === 0) {\r\n      rowKeys.push([]);\r\n    }\r\n    if (colKeys.length === 0) {\r\n      colKeys.push([]);\r\n    }\r\n\r\n    const headerRow = pivotData.props.rows.map(r => r);\r\n    if (colKeys.length === 1 && colKeys[0].length === 0) {\r\n      headerRow.push(this.props.aggregatorName);\r\n    } else {\r\n      colKeys.map(c => headerRow.push(c.join('-')));\r\n    }\r\n\r\n    const result = rowKeys.map(r => {\r\n      const row = r.map(x => x);\r\n      colKeys.map(c => {\r\n        const v = pivotData.getAggregator(r, c).value();\r\n        row.push(v ? v : '');\r\n      });\r\n      return row;\r\n    });\r\n\r\n    result.unshift(headerRow);\r\n\r\n    return (\r\n      <textarea\r\n        value={result.map(r => r.join('\\t')).join('\\n')}\r\n        style={{width: window.innerWidth / 2, height: window.innerHeight / 2}}\r\n        readOnly={true}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nTSVExportRenderer.defaultProps = PivotData.defaultProps;\r\nTSVExportRenderer.propTypes = PivotData.propTypes;\r\n\r\nexport default {\r\n  Table: makeRenderer(),\r\n  'Table Heatmap': makeRenderer({heatmapMode: 'full'}),\r\n  'Table Col Heatmap': makeRenderer({heatmapMode: 'col'}),\r\n  'Table Row Heatmap': makeRenderer({heatmapMode: 'row'}),\r\n  'Exportable TSV': TSVExportRenderer,\r\n};\r\n"]}