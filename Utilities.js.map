{"version":3,"sources":["src/Utilities.js"],"names":["addSeparators","nStr","thousandsSep","decimalSep","x","String","split","x1","x2","length","rgx","test","replace","numberFormat","opts_in","defaults","digitsAfterDecimal","scaler","prefix","suffix","opts","Object","assign","isNaN","isFinite","result","toFixed","rx","rd","rz","naturalSort","as","bs","nas","Number","nbs","a","b","match","a1","shift","b1","sortAs","order","mapping","l_mapping","i","toLowerCase","getSort","sorters","attr","sort","usFmt","usFmtInt","usFmtPct","aggregatorTemplates","count","formatter","push","value","format","uniques","fn","uniq","record","Array","from","includes","numInputs","sum","parseFloat","extremes","mode","data","val","sorter","Math","quantile","q","vals","floor","ceil","runningStat","ddof","n","m","s","m_new","sqrt","Error","sumOverSum","num","denom","sumNum","sumDenom","fractionOf","wrapped","type","rowKey","colKey","selector","total","row","col","inner","getAggregator","countUnique","f","listUnique","join","max","min","first","last","median","average","var","stdev","aggregators","Count","tpl","Sum","Average","Median","Minimum","Maximum","First","Last","locales","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","apply","cancel","totals","vs","by","mthNamesEn","dayNamesEn","zeroPad","number","substr","derivers","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","p","PivotData","inputProps","props","defaultProps","PropTypes","checkPropTypes","propTypes","aggregator","aggregatorName","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","derivedAttributes","filter","processRecord","k","valueFilter","criteria","callback","v","attrs","sortersArr","keys","comparison","r","c","rowOrder","arrSort","rows","colOrder","cols","sortKeys","flatRowKey","fromCharCode","flatColKey","agg","input","addRecord","getOwnPropertyNames","derived","isArray","compactRecord","j","result1","oneOfType","array","object","func","isRequired","string","arrayOf","objectOf","bool","oneOf"],"mappings":"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","file":"Utilities.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\n/*\r\n * decaffeinate suggestions:\r\n * DS101: Remove unnecessary use of Array.from\r\n * DS102: Remove unnecessary code created because of implicit returns\r\n * DS104: Avoid inline assignments\r\n * DS201: Simplify complex destructure assignments\r\n * DS203: Remove `|| {}` from converted for-own loops\r\n * DS205: Consider reworking code to avoid use of IIFEs\r\n * DS207: Consider shorter variations of null checks\r\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\r\n */\r\n\r\nconst addSeparators = function(nStr, thousandsSep, decimalSep) {\r\n  const x = String(nStr).split('.');\r\n  let x1 = x[0];\r\n  const x2 = x.length > 1 ? decimalSep + x[1] : '';\r\n  const rgx = /(\\d+)(\\d{3})/;\r\n  while (rgx.test(x1)) {\r\n    x1 = x1.replace(rgx, `$1${thousandsSep}$2`);\r\n  }\r\n  return x1 + x2;\r\n};\r\n\r\nconst numberFormat = function(opts_in) {\r\n  const defaults = {\r\n    digitsAfterDecimal: 2,\r\n    scaler: 1,\r\n    thousandsSep: ',',\r\n    decimalSep: '.',\r\n    prefix: '',\r\n    suffix: '',\r\n  };\r\n  const opts = Object.assign({}, defaults, opts_in);\r\n  return function(x) {\r\n    if (isNaN(x) || !isFinite(x)) {\r\n      return '';\r\n    }\r\n    const result = addSeparators(\r\n      (opts.scaler * x).toFixed(opts.digitsAfterDecimal),\r\n      opts.thousandsSep,\r\n      opts.decimalSep\r\n    );\r\n    return `${opts.prefix}${result}${opts.suffix}`;\r\n  };\r\n};\r\n\r\nconst rx = /(\\d+)|(\\D+)/g;\r\nconst rd = /\\d/;\r\nconst rz = /^0/;\r\nconst naturalSort = (as, bs) => {\r\n  // nulls first\r\n  if (bs !== null && as === null) {\r\n    return -1;\r\n  }\r\n  if (as !== null && bs === null) {\r\n    return 1;\r\n  }\r\n\r\n  // then raw NaNs\r\n  if (typeof as === 'number' && isNaN(as)) {\r\n    return -1;\r\n  }\r\n  if (typeof bs === 'number' && isNaN(bs)) {\r\n    return 1;\r\n  }\r\n\r\n  // numbers and numbery strings group together\r\n  const nas = Number(as);\r\n  const nbs = Number(bs);\r\n  if (nas < nbs) {\r\n    return -1;\r\n  }\r\n  if (nas > nbs) {\r\n    return 1;\r\n  }\r\n\r\n  // within that, true numbers before numbery strings\r\n  if (typeof as === 'number' && typeof bs !== 'number') {\r\n    return -1;\r\n  }\r\n  if (typeof bs === 'number' && typeof as !== 'number') {\r\n    return 1;\r\n  }\r\n  if (typeof as === 'number' && typeof bs === 'number') {\r\n    return 0;\r\n  }\r\n\r\n  // 'Infinity' is a textual number, so less than 'A'\r\n  if (isNaN(nbs) && !isNaN(nas)) {\r\n    return -1;\r\n  }\r\n  if (isNaN(nas) && !isNaN(nbs)) {\r\n    return 1;\r\n  }\r\n\r\n  // finally, \"smart\" string sorting per http://stackoverflow.com/a/4373421/112871\r\n  let a = String(as);\r\n  let b = String(bs);\r\n  if (a === b) {\r\n    return 0;\r\n  }\r\n  if (!rd.test(a) || !rd.test(b)) {\r\n    return a > b ? 1 : -1;\r\n  }\r\n\r\n  // special treatment for strings containing digits\r\n  a = a.match(rx);\r\n  b = b.match(rx);\r\n  while (a.length && b.length) {\r\n    const a1 = a.shift();\r\n    const b1 = b.shift();\r\n    if (a1 !== b1) {\r\n      if (rd.test(a1) && rd.test(b1)) {\r\n        return a1.replace(rz, '.0') - b1.replace(rz, '.0');\r\n      }\r\n      return a1 > b1 ? 1 : -1;\r\n    }\r\n  }\r\n  return a.length - b.length;\r\n};\r\n\r\nconst sortAs = function(order) {\r\n  const mapping = {};\r\n\r\n  // sort lowercased keys similarly\r\n  const l_mapping = {};\r\n  for (const i in order) {\r\n    const x = order[i];\r\n    mapping[x] = i;\r\n    if (typeof x === 'string') {\r\n      l_mapping[x.toLowerCase()] = i;\r\n    }\r\n  }\r\n  return function(a, b) {\r\n    if (a in mapping && b in mapping) {\r\n      return mapping[a] - mapping[b];\r\n    } else if (a in mapping) {\r\n      return -1;\r\n    } else if (b in mapping) {\r\n      return 1;\r\n    } else if (a in l_mapping && b in l_mapping) {\r\n      return l_mapping[a] - l_mapping[b];\r\n    } else if (a in l_mapping) {\r\n      return -1;\r\n    } else if (b in l_mapping) {\r\n      return 1;\r\n    }\r\n    return naturalSort(a, b);\r\n  };\r\n};\r\n\r\nconst getSort = function(sorters, attr) {\r\n  if (sorters) {\r\n    if (typeof sorters === 'function') {\r\n      const sort = sorters(attr);\r\n      if (typeof sort === 'function') {\r\n        return sort;\r\n      }\r\n    } else if (attr in sorters) {\r\n      return sorters[attr];\r\n    }\r\n  }\r\n  return naturalSort;\r\n};\r\n\r\n// aggregator templates default to US number formatting but this is overrideable\r\nconst usFmt = numberFormat();\r\nconst usFmtInt = numberFormat({digitsAfterDecimal: 0});\r\nconst usFmtPct = numberFormat({\r\n  digitsAfterDecimal: 1,\r\n  scaler: 100,\r\n  suffix: '%',\r\n});\r\n\r\nconst aggregatorTemplates = {\r\n  count(formatter = usFmtInt) {\r\n    return () =>\r\n      function() {\r\n        return {\r\n          count: 0,\r\n          push() {\r\n            this.count++;\r\n          },\r\n          value() {\r\n            return this.count;\r\n          },\r\n          format: formatter,\r\n        };\r\n      };\r\n  },\r\n\r\n  uniques(fn, formatter = usFmtInt) {\r\n    return function([attr]) {\r\n      return function() {\r\n        return {\r\n          uniq: [],\r\n          push(record) {\r\n            if (!Array.from(this.uniq).includes(record[attr])) {\r\n              this.uniq.push(record[attr]);\r\n            }\r\n          },\r\n          value() {\r\n            return fn(this.uniq);\r\n          },\r\n          format: formatter,\r\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\r\n        };\r\n      };\r\n    };\r\n  },\r\n\r\n  sum(formatter = usFmt) {\r\n    return function([attr]) {\r\n      return function() {\r\n        return {\r\n          sum: 0,\r\n          push(record) {\r\n            if (!isNaN(parseFloat(record[attr]))) {\r\n              this.sum += parseFloat(record[attr]);\r\n            }\r\n          },\r\n          value() {\r\n            return this.sum;\r\n          },\r\n          format: formatter,\r\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\r\n        };\r\n      };\r\n    };\r\n  },\r\n\r\n  extremes(mode, formatter = usFmt) {\r\n    return function([attr]) {\r\n      return function(data) {\r\n        return {\r\n          val: null,\r\n          sorter: getSort(\r\n            typeof data !== 'undefined' ? data.sorters : null,\r\n            attr\r\n          ),\r\n          push(record) {\r\n            let x = record[attr];\r\n            if (['min', 'max'].includes(mode)) {\r\n              x = parseFloat(x);\r\n              if (!isNaN(x)) {\r\n                this.val = Math[mode](x, this.val !== null ? this.val : x);\r\n              }\r\n            }\r\n            if (\r\n              mode === 'first' &&\r\n              this.sorter(x, this.val !== null ? this.val : x) <= 0\r\n            ) {\r\n              this.val = x;\r\n            }\r\n            if (\r\n              mode === 'last' &&\r\n              this.sorter(x, this.val !== null ? this.val : x) >= 0\r\n            ) {\r\n              this.val = x;\r\n            }\r\n          },\r\n          value() {\r\n            return this.val;\r\n          },\r\n          format(x) {\r\n            if (isNaN(x)) {\r\n              return x;\r\n            }\r\n            return formatter(x);\r\n          },\r\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\r\n        };\r\n      };\r\n    };\r\n  },\r\n\r\n  quantile(q, formatter = usFmt) {\r\n    return function([attr]) {\r\n      return function() {\r\n        return {\r\n          vals: [],\r\n          push(record) {\r\n            const x = parseFloat(record[attr]);\r\n            if (!isNaN(x)) {\r\n              this.vals.push(x);\r\n            }\r\n          },\r\n          value() {\r\n            if (this.vals.length === 0) {\r\n              return null;\r\n            }\r\n            this.vals.sort((a, b) => a - b);\r\n            const i = (this.vals.length - 1) * q;\r\n            return (this.vals[Math.floor(i)] + this.vals[Math.ceil(i)]) / 2.0;\r\n          },\r\n          format: formatter,\r\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\r\n        };\r\n      };\r\n    };\r\n  },\r\n\r\n  runningStat(mode = 'mean', ddof = 1, formatter = usFmt) {\r\n    return function([attr]) {\r\n      return function() {\r\n        return {\r\n          n: 0.0,\r\n          m: 0.0,\r\n          s: 0.0,\r\n          push(record) {\r\n            const x = parseFloat(record[attr]);\r\n            if (isNaN(x)) {\r\n              return;\r\n            }\r\n            this.n += 1.0;\r\n            if (this.n === 1.0) {\r\n              this.m = x;\r\n            }\r\n            const m_new = this.m + (x - this.m) / this.n;\r\n            this.s = this.s + (x - this.m) * (x - m_new);\r\n            this.m = m_new;\r\n          },\r\n          value() {\r\n            if (mode === 'mean') {\r\n              if (this.n === 0) {\r\n                return 0 / 0;\r\n              }\r\n              return this.m;\r\n            }\r\n            if (this.n <= ddof) {\r\n              return 0;\r\n            }\r\n            switch (mode) {\r\n              case 'var':\r\n                return this.s / (this.n - ddof);\r\n              case 'stdev':\r\n                return Math.sqrt(this.s / (this.n - ddof));\r\n              default:\r\n                throw new Error('unknown mode for runningStat');\r\n            }\r\n          },\r\n          format: formatter,\r\n          numInputs: typeof attr !== 'undefined' ? 0 : 1,\r\n        };\r\n      };\r\n    };\r\n  },\r\n\r\n  sumOverSum(formatter = usFmt) {\r\n    return function([num, denom]) {\r\n      return function() {\r\n        return {\r\n          sumNum: 0,\r\n          sumDenom: 0,\r\n          push(record) {\r\n            if (!isNaN(parseFloat(record[num]))) {\r\n              this.sumNum += parseFloat(record[num]);\r\n            }\r\n            if (!isNaN(parseFloat(record[denom]))) {\r\n              this.sumDenom += parseFloat(record[denom]);\r\n            }\r\n          },\r\n          value() {\r\n            return this.sumNum / this.sumDenom;\r\n          },\r\n          format: formatter,\r\n          numInputs:\r\n            typeof num !== 'undefined' && typeof denom !== 'undefined' ? 0 : 2,\r\n        };\r\n      };\r\n    };\r\n  },\r\n\r\n  fractionOf(wrapped, type = 'total', formatter = usFmtPct) {\r\n    return (...x) =>\r\n      function(data, rowKey, colKey) {\r\n        return {\r\n          selector: {total: [[], []], row: [rowKey, []], col: [[], colKey]}[\r\n            type\r\n          ],\r\n          inner: wrapped(...Array.from(x || []))(data, rowKey, colKey),\r\n          push(record) {\r\n            this.inner.push(record);\r\n          },\r\n          format: formatter,\r\n          value() {\r\n            return (\r\n              this.inner.value() /\r\n              data\r\n                .getAggregator(...Array.from(this.selector || []))\r\n                .inner.value()\r\n            );\r\n          },\r\n          numInputs: wrapped(...Array.from(x || []))().numInputs,\r\n        };\r\n      };\r\n  },\r\n};\r\n\r\naggregatorTemplates.countUnique = f =>\r\n  aggregatorTemplates.uniques(x => x.length, f);\r\naggregatorTemplates.listUnique = s =>\r\n  aggregatorTemplates.uniques(\r\n    x => x.join(s),\r\n    x => x\r\n  );\r\naggregatorTemplates.max = f => aggregatorTemplates.extremes('max', f);\r\naggregatorTemplates.min = f => aggregatorTemplates.extremes('min', f);\r\naggregatorTemplates.first = f => aggregatorTemplates.extremes('first', f);\r\naggregatorTemplates.last = f => aggregatorTemplates.extremes('last', f);\r\naggregatorTemplates.median = f => aggregatorTemplates.quantile(0.5, f);\r\naggregatorTemplates.average = f =>\r\n  aggregatorTemplates.runningStat('mean', 1, f);\r\naggregatorTemplates.var = (ddof, f) =>\r\n  aggregatorTemplates.runningStat('var', ddof, f);\r\naggregatorTemplates.stdev = (ddof, f) =>\r\n  aggregatorTemplates.runningStat('stdev', ddof, f);\r\n\r\n// default aggregators & renderers use US naming and number formatting\r\nconst aggregators = (tpl => ({\r\n  Count: tpl.count(usFmtInt),\r\n  'Count Unique Values': tpl.countUnique(usFmtInt),\r\n  'List Unique Values': tpl.listUnique(', '),\r\n  Sum: tpl.sum(usFmt),\r\n  'Integer Sum': tpl.sum(usFmtInt),\r\n  Average: tpl.average(usFmt),\r\n  Median: tpl.median(usFmt),\r\n  'Sample Variance': tpl.var(1, usFmt),\r\n  'Sample Standard Deviation': tpl.stdev(1, usFmt),\r\n  Minimum: tpl.min(usFmt),\r\n  Maximum: tpl.max(usFmt),\r\n  First: tpl.first(usFmt),\r\n  Last: tpl.last(usFmt),\r\n  'Sum over Sum': tpl.sumOverSum(usFmt),\r\n  'Sum as Fraction of Total': tpl.fractionOf(tpl.sum(), 'total', usFmtPct),\r\n  'Sum as Fraction of Rows': tpl.fractionOf(tpl.sum(), 'row', usFmtPct),\r\n  'Sum as Fraction of Columns': tpl.fractionOf(tpl.sum(), 'col', usFmtPct),\r\n  'Count as Fraction of Total': tpl.fractionOf(tpl.count(), 'total', usFmtPct),\r\n  'Count as Fraction of Rows': tpl.fractionOf(tpl.count(), 'row', usFmtPct),\r\n  'Count as Fraction of Columns': tpl.fractionOf(tpl.count(), 'col', usFmtPct),\r\n}))(aggregatorTemplates);\r\n\r\nconst locales = {\r\n  en: {\r\n    aggregators,\r\n    localeStrings: {\r\n      renderError: 'An error occurred rendering the PivotTable results.',\r\n      computeError: 'An error occurred computing the PivotTable results.',\r\n      uiRenderError: 'An error occurred rendering the PivotTable UI.',\r\n      selectAll: 'Select All',\r\n      selectNone: 'Select None',\r\n      tooMany: '(too many to list)',\r\n      filterResults: 'Filter values',\r\n      apply: 'Apply',\r\n      cancel: 'Cancel',\r\n      totals: 'Totals',\r\n      vs: 'vs',\r\n      by: 'by',\r\n    },\r\n  },\r\n};\r\n\r\n// dateFormat deriver l10n requires month and day names to be passed in directly\r\nconst mthNamesEn = [\r\n  'Jan',\r\n  'Feb',\r\n  'Mar',\r\n  'Apr',\r\n  'May',\r\n  'Jun',\r\n  'Jul',\r\n  'Aug',\r\n  'Sep',\r\n  'Oct',\r\n  'Nov',\r\n  'Dec',\r\n];\r\nconst dayNamesEn = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\nconst zeroPad = number => `0${number}`.substr(-2, 2); // eslint-disable-line no-magic-numbers\r\n\r\nconst derivers = {\r\n  bin(col, binWidth) {\r\n    return record => record[col] - (record[col] % binWidth);\r\n  },\r\n  dateFormat(\r\n    col,\r\n    formatString,\r\n    utcOutput = false,\r\n    mthNames = mthNamesEn,\r\n    dayNames = dayNamesEn\r\n  ) {\r\n    const utc = utcOutput ? 'UTC' : '';\r\n    return function(record) {\r\n      const date = new Date(Date.parse(record[col]));\r\n      if (isNaN(date)) {\r\n        return '';\r\n      }\r\n      return formatString.replace(/%(.)/g, function(m, p) {\r\n        switch (p) {\r\n          case 'y':\r\n            return date[`get${utc}FullYear`]();\r\n          case 'm':\r\n            return zeroPad(date[`get${utc}Month`]() + 1);\r\n          case 'n':\r\n            return mthNames[date[`get${utc}Month`]()];\r\n          case 'd':\r\n            return zeroPad(date[`get${utc}Date`]());\r\n          case 'w':\r\n            return dayNames[date[`get${utc}Day`]()];\r\n          case 'x':\r\n            return date[`get${utc}Day`]();\r\n          case 'H':\r\n            return zeroPad(date[`get${utc}Hours`]());\r\n          case 'M':\r\n            return zeroPad(date[`get${utc}Minutes`]());\r\n          case 'S':\r\n            return zeroPad(date[`get${utc}Seconds`]());\r\n          default:\r\n            return `%${p}`;\r\n        }\r\n      });\r\n    };\r\n  },\r\n};\r\n\r\n/*\r\nData Model class\r\n*/\r\n\r\nclass PivotData {\r\n  constructor(inputProps = {}) {\r\n    this.props = Object.assign({}, PivotData.defaultProps, inputProps);\r\n    PropTypes.checkPropTypes(\r\n      PivotData.propTypes,\r\n      this.props,\r\n      'prop',\r\n      'PivotData'\r\n    );\r\n\r\n    this.aggregator = this.props.aggregators[this.props.aggregatorName](\r\n      this.props.vals\r\n    );\r\n    this.tree = {};\r\n    this.rowKeys = [];\r\n    this.colKeys = [];\r\n    this.rowTotals = {};\r\n    this.colTotals = {};\r\n    this.allTotal = this.aggregator(this, [], []);\r\n    this.sorted = false;\r\n\r\n    // iterate through input, accumulating data for cells\r\n    PivotData.forEachRecord(\r\n      this.props.data,\r\n      this.props.derivedAttributes,\r\n      record => {\r\n        if (this.filter(record)) {\r\n          this.processRecord(record);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  filter(record) {\r\n    for (const k in this.props.valueFilter) {\r\n      if (record[k] in this.props.valueFilter[k]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  forEachMatchingRecord(criteria, callback) {\r\n    return PivotData.forEachRecord(\r\n      this.props.data,\r\n      this.props.derivedAttributes,\r\n      record => {\r\n        if (!this.filter(record)) {\r\n          return;\r\n        }\r\n        for (const k in criteria) {\r\n          const v = criteria[k];\r\n          if (v !== (k in record ? record[k] : 'null')) {\r\n            return;\r\n          }\r\n        }\r\n        callback(record);\r\n      }\r\n    );\r\n  }\r\n\r\n  arrSort(attrs) {\r\n    let a;\r\n    const sortersArr = (() => {\r\n      const result = [];\r\n      for (a of Array.from(attrs)) {\r\n        result.push(getSort(this.props.sorters, a));\r\n      }\r\n      return result;\r\n    })();\r\n    return function(a, b) {\r\n      for (const i of Object.keys(sortersArr || {})) {\r\n        const sorter = sortersArr[i];\r\n        const comparison = sorter(a[i], b[i]);\r\n        if (comparison !== 0) {\r\n          return comparison;\r\n        }\r\n      }\r\n      return 0;\r\n    };\r\n  }\r\n\r\n  sortKeys() {\r\n    if (!this.sorted) {\r\n      this.sorted = true;\r\n      const v = (r, c) => this.getAggregator(r, c).value();\r\n      switch (this.props.rowOrder) {\r\n        case 'value_a_to_z':\r\n          this.rowKeys.sort((a, b) => naturalSort(v(a, []), v(b, [])));\r\n          break;\r\n        case 'value_z_to_a':\r\n          this.rowKeys.sort((a, b) => -naturalSort(v(a, []), v(b, [])));\r\n          break;\r\n        default:\r\n          this.rowKeys.sort(this.arrSort(this.props.rows));\r\n      }\r\n      switch (this.props.colOrder) {\r\n        case 'value_a_to_z':\r\n          this.colKeys.sort((a, b) => naturalSort(v([], a), v([], b)));\r\n          break;\r\n        case 'value_z_to_a':\r\n          this.colKeys.sort((a, b) => -naturalSort(v([], a), v([], b)));\r\n          break;\r\n        default:\r\n          this.colKeys.sort(this.arrSort(this.props.cols));\r\n      }\r\n    }\r\n  }\r\n\r\n  getColKeys() {\r\n    this.sortKeys();\r\n    return this.colKeys;\r\n  }\r\n\r\n  getRowKeys() {\r\n    this.sortKeys();\r\n    return this.rowKeys;\r\n  }\r\n\r\n  processRecord(record) {\r\n    // this code is called in a tight loop\r\n    const colKey = [];\r\n    const rowKey = [];\r\n    for (const x of Array.from(this.props.cols)) {\r\n      colKey.push(x in record ? record[x] : 'null');\r\n    }\r\n    for (const x of Array.from(this.props.rows)) {\r\n      rowKey.push(x in record ? record[x] : 'null');\r\n    }\r\n    const flatRowKey = rowKey.join(String.fromCharCode(0));\r\n    const flatColKey = colKey.join(String.fromCharCode(0));\r\n\r\n    this.allTotal.push(record);\r\n\r\n    if (rowKey.length !== 0) {\r\n      if (!this.rowTotals[flatRowKey]) {\r\n        this.rowKeys.push(rowKey);\r\n        this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\r\n      }\r\n      this.rowTotals[flatRowKey].push(record);\r\n    }\r\n\r\n    if (colKey.length !== 0) {\r\n      if (!this.colTotals[flatColKey]) {\r\n        this.colKeys.push(colKey);\r\n        this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\r\n      }\r\n      this.colTotals[flatColKey].push(record);\r\n    }\r\n\r\n    if (colKey.length !== 0 && rowKey.length !== 0) {\r\n      if (!this.tree[flatRowKey]) {\r\n        this.tree[flatRowKey] = {};\r\n      }\r\n      if (!this.tree[flatRowKey][flatColKey]) {\r\n        this.tree[flatRowKey][flatColKey] = this.aggregator(\r\n          this,\r\n          rowKey,\r\n          colKey\r\n        );\r\n      }\r\n      this.tree[flatRowKey][flatColKey].push(record);\r\n    }\r\n  }\r\n\r\n  getAggregator(rowKey, colKey) {\r\n    let agg;\r\n    const flatRowKey = rowKey.join(String.fromCharCode(0));\r\n    const flatColKey = colKey.join(String.fromCharCode(0));\r\n    if (rowKey.length === 0 && colKey.length === 0) {\r\n      agg = this.allTotal;\r\n    } else if (rowKey.length === 0) {\r\n      agg = this.colTotals[flatColKey];\r\n    } else if (colKey.length === 0) {\r\n      agg = this.rowTotals[flatRowKey];\r\n    } else {\r\n      agg = this.tree[flatRowKey][flatColKey];\r\n    }\r\n    return (\r\n      agg || {\r\n        value() {\r\n          return null;\r\n        },\r\n        format() {\r\n          return '';\r\n        },\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n// can handle arrays or jQuery selections of tables\r\nPivotData.forEachRecord = function(input, derivedAttributes, f) {\r\n  let addRecord, record;\r\n  if (Object.getOwnPropertyNames(derivedAttributes).length === 0) {\r\n    addRecord = f;\r\n  } else {\r\n    addRecord = function(record) {\r\n      for (const k in derivedAttributes) {\r\n        const derived = derivedAttributes[k](record);\r\n        if (derived !== null) {\r\n          record[k] = derived;\r\n        }\r\n      }\r\n      return f(record);\r\n    };\r\n  }\r\n\r\n  // if it's a function, have it call us back\r\n  if (typeof input === 'function') {\r\n    return input(addRecord);\r\n  } else if (Array.isArray(input)) {\r\n    if (Array.isArray(input[0])) {\r\n      // array of arrays\r\n      return (() => {\r\n        const result = [];\r\n        for (const i of Object.keys(input || {})) {\r\n          const compactRecord = input[i];\r\n          if (i > 0) {\r\n            record = {};\r\n            for (const j of Object.keys(input[0] || {})) {\r\n              const k = input[0][j];\r\n              record[k] = compactRecord[j];\r\n            }\r\n            result.push(addRecord(record));\r\n          }\r\n        }\r\n        return result;\r\n      })();\r\n    }\r\n\r\n    // array of objects\r\n    return (() => {\r\n      const result1 = [];\r\n      for (record of Array.from(input)) {\r\n        result1.push(addRecord(record));\r\n      }\r\n      return result1;\r\n    })();\r\n  }\r\n  throw new Error('unknown input format');\r\n};\r\n\r\nPivotData.defaultProps = {\r\n  aggregators: aggregators,\r\n  cols: [],\r\n  rows: [],\r\n  vals: [],\r\n  aggregatorName: 'Count',\r\n  sorters: {},\r\n  valueFilter: {},\r\n  rowOrder: 'key_a_to_z',\r\n  colOrder: 'key_a_to_z',\r\n  derivedAttributes: {},\r\n};\r\n\r\nPivotData.propTypes = {\r\n  data: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.func])\r\n    .isRequired,\r\n  aggregatorName: PropTypes.string,\r\n  cols: PropTypes.arrayOf(PropTypes.string),\r\n  rows: PropTypes.arrayOf(PropTypes.string),\r\n  vals: PropTypes.arrayOf(PropTypes.string),\r\n  valueFilter: PropTypes.objectOf(PropTypes.objectOf(PropTypes.bool)),\r\n  sorters: PropTypes.oneOfType([\r\n    PropTypes.func,\r\n    PropTypes.objectOf(PropTypes.func),\r\n  ]),\r\n  derivedAttributes: PropTypes.objectOf(PropTypes.func),\r\n  rowOrder: PropTypes.oneOf(['key_a_to_z', 'value_a_to_z', 'value_z_to_a']),\r\n  colOrder: PropTypes.oneOf(['key_a_to_z', 'value_a_to_z', 'value_z_to_a']),\r\n};\r\n\r\nexport {\r\n  aggregatorTemplates,\r\n  aggregators,\r\n  derivers,\r\n  locales,\r\n  naturalSort,\r\n  numberFormat,\r\n  getSort,\r\n  sortAs,\r\n  PivotData,\r\n};\r\n"]}